/*
 * example.c
 *
 *	Library for the EiceDRIVER APD 2ED4820-EM 48 V smart high-side MOSFET gate driver.
 *	Created by R. Santeler @ MCI EAL 2022 (based on sample code from schwarzg created on 4 Mar 2020)
 *
 *  USAGE (see "example.c_" for details):
 * 			- Implement target specific functions in target.h/.c
 * 			- Implement ISR for Interrupt and its behavior in main code
 * 			- Init Driver with driverInit() command and use set...() commands to configure it
 * 			- Use switchON() and switchOFF() to control driver simple or use the implemented function for advanced control (see comment of functions)
 *
*******************************************************************************
 * (c) (2024), Cypress Semiconductor Corporation (an Infineon company) or an affiliate of Cypress Semiconductor Corporation.  All rights reserved.
 * This software, including source code, documentation and related materials ("Software") is owned by Cypress Semiconductor Corporation or one of its affiliates ("Cypress") and is protected by and subject to worldwide patent protection (United States and foreign), United States copyright laws and international treaty provisions.  Therefore, you may use this Software only as provided in the license agreement accompanying the software package from which you obtained this Software ("EULA").
 * If no EULA applies, Cypress hereby grants you a personal, non-exclusive, non-transferable license to copy, modify, and compile the Software source code solely for use in connection with Cypress's integrated circuit products.  Any reproduction, modification, translation, compilation, or representation of this Software except as specified above is prohibited without the express written permission of Cypress.
 * Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress reserves the right to make changes to the Software without notice. Cypress does not assume any liability arising out of the application or use of the Software or any product or circuit described in the Software. Cypress does not authorize its products for use in any products where a malfunction or failure of the Cypress product may reasonably be expected to result in significant property damage, injury or death ("High Risk Product"). By including Cypress's product in a High Risk Product, the manufacturer of such system or application assumes all risk of such use and in doing so agrees to indemnify Cypress against all liability.
*******************************************************************************/


#include <stdio.h>
#include <stdint.h>
#include "Driver_2ED4820/Driver_2ED4820.h"

uint8_t state = 0; // main loop state
volatile uint8_t interruptDetected = 0; // error interrupt detection


int main(void)
{
  // Init / setup MOSFET driver (and write Setup to debug)
  driverInit();
  
  setCurrentSenseShuntConfig(CSSC_HIGHSIDE);
  setCrossControl(CC_ON);
  setBlankTime(BT_10US, BT_10US);
  setFilterTime(FT_1US, FT_1US);
  setCurrentSenseAmpGain(CSAG_40VV);
  setCurrentSenseLoadAdjust(CSLA_LT100PF);
  setCurrentSenseOverCurrentThres(CSOCT_0_3);
  setDrainSourceOvervoltageThres(DSOT_200MV, DSOT_200MV);
  setDrainSourceOvervoltageDeactivation(DSOD_ENABLED, DSOD_ENABLED);
  setVbatOvervoltageRestartTime(VORT_10US);
  setVbatUndervoltageRestartTime(VURT_1MS);
  
  printConfig(USE_REG_RENEW);

  /* Application main loop */
  while(1U) {
  
	  // Switch ON/OFF successively every 1 second
	  if(state == 0){
		  debugPrint("\r\n---- Switch ON\r\n");
		  switchOn(USE_REG_RENEW); // read registers anew and then change state
		  state = 1;
	  }
	  else{
		  debugPrint("\r\n---- Switch OFF\r\n");
		  switchOff(USE_REG_RENEW); // read registers anew and then change state
		  state = 0;
	  }

	  // Read current registers to cache (so we dont need to do this with every command -> save time)
	  readAllRegistersToCache();

	  // If an interrupt occurred the flags must be checked and reacted to
	  if(interruptDetected || isProblemDetected()){
		  reactToFailure(); //printStatusFlags(USE_REG_CACHED);
		  interruptDetected = 0;
	  }

	  // Check other status flags, clear all flags and dump registers to debug
	  reactToWarningMonitoring();
	  clearStatusFlags();
	  clearProblemDetected();
	  delay_ms(1000);
  }
}

// MOSFET Driver failure interrupt
void Driver_IRQHandler (void){
	interruptDetected = 1;
}







// Implementation of failure handling (specific for every failure)
void reactToFailure(){
	debugPrintf("Interrupt detected\r\n");


	if(isFailureFlagActive(Fail_VBAT_UNDERVOLTAGE, USE_REG_CACHED))
		debugPrintf("[FAILURE]: Vbat undervoltage\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_VBAT_OVERVOLTAGE, USE_REG_CACHED))
		debugPrintf("[FAILURE]: Vbat overvoltage\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_VDD_UNDERVOLTAGE, USE_REG_CACHED))
		debugPrintf("[FAILURE]: Vdd undervoltage\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_CHIP_OVERTEMPERATURE, USE_REG_CACHED))
		debugPrintf("[FAILURE]: Chip overtemperature\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_VDS_OVERVOLTAGE_A, USE_REG_CACHED))
		debugPrintf("[FAILURE]: VDS overvoltage channel A\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_VGS_UNDERVOLTAGE_A, USE_REG_CACHED))
		debugPrintf("[FAILURE]: VGS undervoltage channel A\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_VDS_OVERVOLTAGE_B, USE_REG_CACHED))
		debugPrintf("[FAILURE]: VDS overvoltage channel B\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_VGS_UNDERVOLTAGE_B, USE_REG_CACHED))
		debugPrintf("[FAILURE]: VGS undervoltage channel B\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_OVERCURRENT, USE_REG_CACHED))
		debugPrintf("[FAILURE]: Overcurrent\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_CHARGEPUMP_UNDERVOLTAGE, USE_REG_CACHED))
		debugPrintf("[FAILURE]: Charge pump undervoltage\r\n");
		// Error specific reaction / code

	if(isFailureFlagActive(Fail_SAVESTATE_ENABLED, USE_REG_CACHED))
		debugPrintf("[FAILURE]: SAFESTATE activated\r\n");
		// Error specific reaction / code

}

// Implementation of waninngs and monitoring message handling (specific for every event)
void reactToWarningMonitoring(){

	if(isWarningFlagActive(Warn_OVERTEMP, USE_REG_CACHED))
		debugPrintf("[WARNING]: Chip overtemperature\r\n");
		// Error specific reaction / code

	if(isWarningFlagActive(Warn_MEMFAIL, USE_REG_CACHED))
		debugPrintf("[WARNING]: Memory Error\r\n");
		// Error specific reaction / code

	if(isWarningFlagActive(Warn_LOSSOFGROUND_CP, USE_REG_CACHED))
		debugPrintf("[WARNING]: Loss of charge pump ground\r\n");
		// Error specific reaction / code

	if(isWarningFlagActive(Warn_LOSSOFGROUND_D, USE_REG_CACHED))
		debugPrintf("[WARNING]: Loss of digital ground\r\n");
		// Error specific reaction / code

	if(isWarningFlagActive(Warn_LOSSOFGROUND_A, USE_REG_CACHED))
		debugPrintf("[WARNING]: Loss of analog ground\r\n");
		// Error specific reaction / code



	if(isMonitoringFlagActive(Monitor_SPI_ADDRESS_NOT_AVAIL, USE_REG_CACHED))
		debugPrintf("[MONITOR]: SPI address not available\r\n");
		// Error specific reaction / code

	if(isMonitoringFlagActive(Monitor_SOURCE_OVERVOLTAGE_A, USE_REG_CACHED))
		debugPrintf("[MONITOR]: Source overvoltage channel A\r\n");
		// Error specific reaction / code

	if(isMonitoringFlagActive(Monitor_SOURCE_OVERVOLTAGE_B, USE_REG_CACHED))
		debugPrintf("[MONITOR]: Source overvoltage channel B\r\n");
		// Error specific reaction / code

}